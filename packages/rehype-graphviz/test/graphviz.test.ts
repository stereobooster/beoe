import { expect, it } from "vitest";

import { processGraphvizSvg } from "../src/graphviz";

const svg = `<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 10.0.1 (0)
 -->
<!-- Title: G Pages: 1 -->
<svg width="79pt" height="116pt"
 viewBox="0.00 0.00 79.41 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-112 75.41,-112 75.41,4 -4,4"/>
<!-- Hello -->
</g>
</svg>`;

it("removes xml doctype", async () => {
  const result = processGraphvizSvg(svg);

  expect(result).toMatchInlineSnapshot(
    `
    {
      "children": [
        {
          "children": [
            {
              "children": [
                {
                  "children": [],
                  "properties": {
                    "d": "M-4 4v-116h79.41V4z",
                    "fill": "#fff",
                  },
                  "tagName": "path",
                  "type": "element",
                },
              ],
              "properties": {
                "className": [
                  "graph",
                ],
                "transform": "translate(4 112)",
              },
              "tagName": "g",
              "type": "element",
            },
          ],
          "properties": {
            "viewBox": "0 0 79.41 116",
            "xmlns": "http://www.w3.org/2000/svg",
          },
          "tagName": "svg",
          "type": "element",
        },
      ],
      "properties": {
        "class": "beoe graphviz",
        "data-graph": undefined,
      },
      "tagName": "figure",
      "type": "element",
    }
  `
  );
});

it.skip("removes width and height", async () => {
  const result = processGraphvizSvg(svg);
});

it("wraps in a figure with classes", async () => {
  const result = processGraphvizSvg(svg);

  expect(result.type).toEqual("element");
  expect(result.tagName).toEqual("figure");
});

it("is possible to add class", async () => {
  const result = processGraphvizSvg(svg, "not-content");

  expect(result.properties.class).toEqual("beoe graphviz not-content");
});
